<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAIBsAAAEAIAAUDgAAFgAAACgAAAAgAAAANgAAAAEAIAAAAAAAgA0AAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATF7rAEVV7AA+Te4ATF7pAztK6iE3ROlOND/pgTI8
        6KYyPOe+MjzmyzI75cYxOuSzMDjilzA44GYwNt40MTXbDS4y3wAvM9sAMTbbAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWGvrAEtd7QA/T+8AR1fsFUBQ7Vc7Su2hN0Ts2TRB
        7PQzP+z/Mz7s/zM+7P8zPuz/Mz7s/zM96/8yPOn/Mjvn+zE55OgwNuC9LzTdci8z2iUZGeoALzLaADg9
        3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFVp7gBKXO8AT2HtDkVW7WQ+Te7JOEbt+jVB
        7f8zP+3/Mz7u/zM+7v8zPu7/Mz7u/zM+7v8zPu7/Mz7u/zM+7v8zPu7/Mz7t/zI86v8xOeX/LzXf3S4y
        23wwMtkXLS7YADE02QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABbbfAANj7zAE1f7zREVO6xO0nu+jVB
        7f8zPu7/Mz7u/zM+7v8zPu7/Mj7u/zI97v8yPe7/Mj3u/zI97v8yPe7/Mj7u/zM+7v8zPu7/Mz7u/zM+
        7v8yPOr/MDfj/i4y28AuMNg4JyTUADU42gAAAAAAAAAAAAAAAAAAAAAAXG3wAHeN8AFPYO9TRFTu3j1K
        7v82Qe7/Mj7u/zI+7v8yPe7/Mj3u/zI97/8xPe//MT3v/zE97/8xPe//MT3v/zE97/8xPe//Mj3v/zI9
        7v8yPu7/Mz7u/zM+7v8zPe3/MTnm/y4x290vMNdJEArKAEhQ4gAAAAAAAAAAAG+C8wBqfPEBU2TwWURU
        7ulHVO//ZW/y/zlF7/8yPe7/Mj3u/zE87v8wO+z/MDnq/y836P8vNuf/Ljbm/y415f8uNeX/Ljbm/y42
        5/8vN+j/MDnq/zA66/8xPO3/Mj3u/zM+7v8zPu7/MTnm/y4x294vMdg6KSjUAAAAAAAAAAAAUGDuAFdo
        8UVJWfDnNkTu/zxI7/9IU/D/MTvs/y835/8uNOP/LTPi/y4z4f8wNeP/Mjjk/zU75v80O+f/Mzvn/zlA
        6P8zOuf/OUDn/zE45f8yOOX/Lzbj/y404/8uNOT/Lzbm/zE76v8yPu3/MDfk/y4w2cMxM9gYNjvaAGZ4
        8QBcbfAdUGHwyztJ7/8yPu3/MDnp/y005P8wNuP/Mjnm/zc/6v8/Se7/OkXu/0hS8P8/SvD/R1Hw/0BK
        8P8+SfD/Q07w/zlD7/9ET/D/PUjw/0FM8P9ETvD/PEfv/0BK7v82Pun/MTjm/zA35v8wOef/LjLd/S4v
        1nY9RNwBanzxAlhp8IFEVO/+Mjzq/y815P81POf/RU7t/0ZQ8P88R/D/QErw/zhD7/81QO7/NkDu/zI9
        7v8yPe7/MTzu/zI97v8xPO7/MTzu/zE87v8yPe7/Mj3u/zVA7v82Qe//PEfv/0VQ8f9BTPD/Qkvu/zhA
        6v8uM+H/LS7XzjE02BlfcfEhUmLv1zdC6P8vN+b/MDrs/z1I8P9gafL/NUDu/zI97v8xPO7/MTzu/zE8
        7v8xPO7/MTzu/zE87v8xPO7/MTzu/zE87v8xPO7/MTzu/zE87v8xPO7/MTzu/zE87v8wPO7/Mj3u/zVA
        7/8/SvD/SVPx/z5G6/8sLtn1Li/VT1xt8GFHU+r5Mjvq/zE87/8xPe//NUHv/0pU8P80P+7/MTzu/zE8
        7v8xPO7/MTzu/zE87v8xPO7/MTzu/zE87v8xPO7/MTzu/zE87v8xPO7/MTzu/zE87v8xPO7/MTzu/zE8
        7v8xPO7/MTzu/zA87/89SPD/Qkvv/y4y3/8tLdSBVGHrl0BN7P8xPe//MT3v/zA77/9BS/D/cHj0/0RO
        8P8wO+7/MTzu/zE87v8xPO7/MTzu/zE87v8zPu7/MTzu/zE87v8xPO7/MTzu/zE87v8xPO7/MTzu/zE8
        7v8xPO7/MTzu/zE87v8xPO7/MDvu/1Ba8f9iavL/PULk/yss1qlUYuyxQlDv/zE97/8xPe//MTzu/zdC
        7/9VXvH/O0Xv/zA87v8xPO7/MTzu/zE87v8xPO7/Mz7v/0BM8P8yPe//MTzu/zE87v8xPO7/MTzu/zE8
        7v8xPO7/MTzu/zE87v8xPO7/MTzu/zE87v8xPO7/TFbx/2Rt8/84Pub/LC3YxVtr8LFDU/D/MT3v/zE8
        7v8xPO7/MTzu/zA77v8xPO7/MTzu/zE87v8xPO7/MTzu/zE87v82Qu//TVnx/zM/7/8xPO7/MTzu/zE8
        7v8xPO7/MTzu/zE87v8xPO7/MTzu/zE87v8xPO7/MTzu/zI97v8zPu7/NUHv/zA45/8sLdjTXm/ylEhY
        8P8xPu7/MTzu/zE87v8xPO7/MTzu/zE87v8xPO7/MTzu/zE87v8xPO7/MTzu/zdF7/9WY/L/NULv/zE8
        7v8xPO7/MTzu/zE87v8xPO7/MTzu/zE87v8xPO7/MTzu/zE87v80Pu3/OELt/zE87v8xPO//Lzfn/ywt
        2NZfcPJrTV3w/DVC7v8xPe//MTzu/zE87v8xPO7/MTzu/zE87v8xPO7/MTzu/zE87v8xPO7/N0Tv/1po
        8v86Se//MT3u/zE87v8xPO7/MTzu/zE87v8xPO7/MTzu/zE87v8xPO7/MDzu/0BJ7P82QOv/MTzu/zE8
        7v8vNuf/LC3Y02Bx8k5PX+/1Okbp/zdD7f8xPO//MTzu/zE87v8xPO7/MTzu/zE87v8xPO7/MTzu/zE8
        7v80Qu//V2bz/0RU8P8yP+//MTzu/zE87v8xPO7/MTzu/zE87v8xPO7/MTzu/zE97/8/Su7/REvo/zA5
        6v8xPO7/MTzu/y825v8tLtjBYnPzMlFh7ug1P+T/Qk3p/zZD7v8xPe//MTzu/zE87v8xPO7/MTzu/zE8
        7v8xPO7/MTzu/zNA7v9IVt//UF/v/zdG7/8yPe//MTzu/zE87v8xPO7/MT3u/zI+7/8zQe//Q1Dv/05X
        6f8yOOP/MDrs/zE87v8xPO7/LjTj/y0u2Jpld/QUVGXtyzZA4/83PuL/SFXr/zhG7/8yPu//MT3v/zE8
        7v8xPO7/MTzu/zE87v8xPO7/Mj/r/z9Vkf9LWsz/QlPy/zhH7/8zQe//M0Dv/zRB7/82RfD/P07x/1Ff
        6/9QW+P/Mznh/y835/8xPO7/MTzu/zE77f8uM+D3LzHYWnSJ+AJZa++UQEzn/y0y3/85QOL/S1jp/0FP
        7v82RPH/M0Dw/zI/7/8yP+//M0Hv/zVE7/83Re3/Q2F9/0lkfP9CTtv/QlLx/0BQ8v9BUfL/SFfw/1Jh
        5/9Za8j/SVuy/zE41/8uNeX/MTvt/zE87v8xPe//MTvp/zM63sQ6QNwWb4P3AF9w8UVOXuz0Mjrj/y0x
        3/8zOeH/RlLc/01hx/9GVd//QU/t/0FQ8P9DUfD/Q1Dv/z5I5/9HY4T/WYNZ/0die/9AULP/R1e3/0xe
        p/9OZo3/SWZ0/z1Wi/8xPM//MDfo/zE87f8yPe//Mj/v/zNA7f88R+bsTFfkTwAAwgAAAAAAY3XzCVts
        8aZDUez/Lzfl/y0y4/8vN9f/OUuu/0Rdhv9HX43/SVyf/0dXo/9EUp7/QlSN/0xvZf88YED/L1A0/z1g
        R/9bhWP/VH5b/0Vkdv9AVrz/PEvo/zhH7/83Ru//NkXv/zdH7/87S+7/RVPq71hm6V6ovvwCa3jpAAAA
        AABhcvIAYHHyKVZn8dBAT+7/Mjzs/zA46/8wOOz/M0Db/zdMuf87Vp//P12Q/0Ngff9ReF3/Xopf/z5h
        Qf8vTzX/PmJB/1iCYP9VfWD/RWRv/0JSpf9HVc7/SFfh/0dW5v9HVun/SFft/0hV6fNLVuVybHnoA3mJ
        7wAAAAAAAAAAAAAAAABcbfIAXm/xMlZn8blGV/D6Okfv/zVB7/8zP/D/NUDy/zpE8P89R9T/Rl+O/1iB
        ZP9Te3v/SGt8/1B5Uv9LdEb/PVV8/zhKwf86Uqb/OlOU/ztRmf89ULD/PU3J/ztH4P83QubmNj/iZh8j
        1gVaZugAAAAAAAAAAAAAAAAAAAAAAGJ08gBbbPEAanzzEWN181hZavKUVGTysFJh8OhJVdr/QU+v/z9Y
        hv9DY4v/PVe4/zRF4P8zQd//P195/0dwP/89UZj/Okjz/zhH8v82RPH/NkTv/zZF7v83Re3sN0XpqDdF
        5TtjguABOEDfAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG6B9QBmePMAW2zyAAAA5gCSpvoFW23wN1Fj
        2phJXtLaQFLf9TlI7f43RPH/NkTw/zhG8f48Tt3yRWd20URdjYNBUvNxQlPwmEFS8KVBUfCZQFHucEBR
        6zVIWugHNEHkADxI4gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAc4b1AGl8
        9gBWZu8AfpD/A1Zo/yNPYfRPTF3xdElb8YlIWfCKRlfwdERV9EhLX+MZ//8AAEBP8QAaJ+wAaHz1AgAA
        5gA7S+0APk7rAEJS6QBebugAAAAAAAAAAAAAAAAAAAAAAAAAAAD/wAH//wAAf/wAAB/4AAAP4AAAB8AA
        AAPAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAA
        AAGAAAABwAAAA+AAAAfwAAAP/gAAP/+AO/8=
</value>
  </data>
</root>